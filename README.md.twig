<!--
  NOTE: this file is automatically generated by STAMP
  Any manual changes to this file will be overwritten
  Please refer to http://github.com/linkorb/stamp-templates for further information
-->
# {{ variables.project.title }}

{% if variables.circleci.token %}
[![CircleCI]({{ variables.circleci.url }}.svg?style=svg&circle-token={{ variables.circleci.token }})]({{ variables.circleci.url }})
{% endif %}

## Installation

    # Clone the code from Github
    git clone {{ metaculous.github.repository.ssh_url }}
    cd {{ metaculous.github.repository.name }}

{% if metaculous['composer.json'] %}
    # Install php dependencies <!-- reason: composer.json found -->
    composer install
{% endif %}

{% if metaculous['bower.json'] %}
    # Install bower dependencies <!-- reason: bower.json found -->
    bower install
{% endif %}

{% if metaculous['.env.dist'] %}
    # Configuration <!-- reason: .env.dist found -->
    cp .env.dist
    edit .env # adjust for your environment
{% endif %}

{% if metaculous['composer.json'].require['radvance/radvance'] %}
    # Configure radvance  <!-- reason: radvance/radvance found in composer.json -->
    cp app/config/parameters.yml.dist app/config/parameters.yml
    edit app/config/parameters.yml # adjust for your environment
{% endif %}

{% if metaculous['composer.json'].require['radvance/radvance'] %}
    # Create database <!-- reason: radvance/radvance found in composer.json -->
    mysql -e "create database {{ metaculous.github.repository.name }}"

    # Initialize db schema
    vendor/bin/radvance schema:load --apply
{% endif %}

{% if metaculous['composer.json']['require-dev']['linkorb/haigha'] %}
    # Insert fixtures (example data) <!-- reason: linkorb/haigha found in composer.json (require-dev) -->
    vendor/bin/haigha fixtures:load fixtures/all.yml mysql://username:password@localhost/haigha
{% endif %}


{% if metaculous['composer.json'] %}
## Composer (PHP dependency management) <!-- reason: composer.json found -->

This project uses [Composer](https://getcomposer.org/) for PHP dependency management.

{% if metaculous['composer.json'].type == 'application' %}
Install this application's PHP dependencies (into `vendor/`) with the following command:

    composer install <!-- reason: type='application' in composer.json -->
{% endif %}

{% if metaculous['composer.json'].type == 'library' %}
Install this library into your application with the following command:

    composer require {{ metaculous['composer.json'].name }} <!-- reason: type='library' in composer.json -->
{% endif %}

{% endif %}


{% if metaculous['bower.json'] %}
## Bower (Web dependency management) <!-- reason: bower.json found -->

This project uses [Bower](https://bower.io/) for it's web package dependency management.

Install this application's web dependencies with the following command:

    bower install

NOTE: Bower is still maintained, but it is recommended to switch to npm/yarn/webpack etc ([read more](https://bower.io/blog/2017/how-to-migrate-away-from-bower/)).
{% endif %}


{% if metaculous['package.json'] %}
## NPM (Node dependencies) <!-- reason: package.json found -->

This project uses [NPM](https://npmjs.org/) for it's javascript dependency management.

Install this application's node dependencies (into `node_modules/`) with the following command:

    npm install

{% endif %}


{% if metaculous['package.json']['dependencies']['@symfony/webpack-encore'] %}
## Webpack encore <!-- reason: @symfony/webpack-encore found in package.json (dependencies) -->

We're using [Encore](https://symfony.com/doc/current/frontend.html#webpack-encore).

Configuration is found in `./webpack.config.js`, to build assets, you'll need to run:

    ./node_modules/.bin/encore dev # or production

This will take source file assets (usually in `assets/`) and build them into `web/build`.

For quick development, run encore in watch mode:

    ./node_modules/.bin/encore dev --watch

This will automatically rebuild everytime a source file is changed.
{% endif %}


{% if metaculous['.circleci/config.yml'] %}
## CircleCI (Continuous Integration) <!-- reason: .circleci/config.yml found -->

This project is using [CircleCI](https://circleci.com) for continues integration. Please check the `.circleci/` directory for
the configuration (in version {{ metaculous['.circleci/config.yml'].version }} format).
{% endif %}

{% if metaculous['anonymizer.yml'] %}
## Anonymizer (database scrambling) <!-- reason: anonymizer.yml found -->

This project is using [anonymizer](https://github.com/linkorb/anonymizer) for database anonimization.
Please check the [anonymizer documentation](https://github.com/linkorb/anonymizer) for detailed information.

To apply the anonymizer configuration to your database, run the following command:

    vendor/bin/anonymizer run
{% endif %}

{% if metaculous['composer.json']['require-dev']['linkorb/haigha'] %}
## Haigha (database fixtures) <!-- reason: linkorb/haigha found in require-dev of composer.json -->

This project is using [haigha](https://github.com/linkorb/haigha) for database fixtures.
Please check the [haigha documentation](https://github.com/linkorb/haigha) for detailed information.

To load the database fixtures into your database, run the following command:

    vendor/bin/haigha fixtures:load fixtures/all.yml mysql://username:password@localhost/my-database
{% endif %}

{% if metaculous['Dockerfile'] %}
## Docker <!-- reason: Dockerfile found -->

This project includes a [Dockerfile](https://docs.docker.com/engine/reference/builder/)
to generate a docker image.

To build the image:

    docker build -t {{ metaculous.github.repository.name }} .

To run the image:

    docker run -ti -p 8080:80 --name {{ metaculous.github.repository.name }} {{ metaculous.github.repository.name }}

{% endif %}


{% if metaculous['docker-compose.yml'] %}
## docker-compose.yaml <!-- reason: docker-compose.yml found -->

This project is using [docker-compose](https://docs.docker.com/compose/) to simplify local development. Please check the `docker-compose.yml` file for
the configuration, ports, and required configuration (environment variables).

To start the application using docker-compose, simply run:

    docker-compose up
{% endif %}

## Stamp

This file is generated by [stamp](https://github.com/linkorb/stamp), using [these templates](https://github.com/linkorb/stamp-templates).

It is using repository data collected by [metaculous](https://github.com/linkorb/metaculous).

To regenerate files in this repository, run the following commands

    composer run metaculous # generates metaculous.json
    composer run stamp # generates all stamp generated files

As these commands potentially overwrite files, it is recommended to first commit any local changes, then run stamp, then use `git diff` or similar to verify any generated changes.

## License

{{ variables.project.license }} (see [LICENSE.md](LICENSE.md) for details).

## Brought to you by the LinkORB Engineering team

<img src="http://www.linkorb.com/d/meta/tier1/images/linkorbengineering-logo.png" width="200px" /><br />
Check out our other projects at [linkorb.com/engineering](http://www.linkorb.com/engineering).

Btw, we're hiring!

